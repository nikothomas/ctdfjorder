name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: ['*']

jobs:
  run-with-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Cache the installation of Poetry itself.
      - name: Cache poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.3.2

      # Install Poetry.
      - uses: snok/install-poetry@v1.3.3
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Cache dependencies.

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv

          key: pydeps-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies and project
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Run tests with coverage
        run: poetry run pytest --cov=ctdfjorder --cov-report=html

      - name: Upload coverage report as artifact
        if: success()  # This step will only run if previous steps succeeded
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov
      - name: Get coverage percentage
        id: coverage
        run: |
          coverage=$(poetry run pytest --cov=ctdfjorder --cov-report=term | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "coverage=$coverage" >> $GITHUB_ENV

      - name: Get coverage percentage
        id: coverage
        run: |
          coverage=$(poetry run pytest --cov=ctdfjorder --cov-report=term | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "coverage=$coverage" >> $GITHUB_ENV
          if [ $coverage -ge 90 ]; then echo "color=brightgreen" >> $GITHUB_ENV; fi
          if [ $coverage -ge 80 ] && [ $coverage -lt 90 ]; then echo "color=green" >> $GITHUB_ENV; fi
          if [ $coverage -ge 70 ] && [ $coverage -lt 80 ]; then echo "color=yellowgreen" >> $GITHUB_ENV; fi
          if [ $coverage -ge 60 ] && [ $coverage -lt 70 ]; then echo "color=yellow" >> $GITHUB_ENV; fi
          if [ $coverage -ge 50 ] && [ $coverage -lt 60 ]; then echo "color=orange" >> $GITHUB_ENV; fi
          if [ $coverage -lt 50 ]; then echo "color=red" >> $GITHUB_ENV; fi

      - name: Generate coverage badge
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          label: coverage
          message: ${{ env.coverage }}%
          color: ${{ env.color }}

      - name: Output coverage badge URL
        run: |
          echo "Badge URL: ${{ steps.dynamic-badges.outputs.badge-url }}"
