name: Build and Publish

on:
  push:
    tags:
      - "v*"
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry requests packaging

      - name: Check and Publish to PyPI
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          CURRENT_VERSION=$(poetry version -s)
          PACKAGE_NAME="ctdfjorder"
          PYPI_URL="https://pypi.org/pypi/${PACKAGE_NAME}/json"
          EXISTING_VERSION=$(curl -s $PYPI_URL | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")

          if [ "$(python -c "from packaging.version import parse; print(parse('$CURRENT_VERSION') > parse('$EXISTING_VERSION'))")" == "True" ]; then
            poetry config pypi-token.pypi "$PYPI_API_TOKEN"
            poetry publish --build
          else
            echo "Current version ($CURRENT_VERSION) is not greater than existing version ($EXISTING_VERSION). Skipping publish."
          fi

      - name: Get the list of commits since the last release
        id: get_commits
        run: |
          # Get the latest tag (or the last commit if no tags exist)
          LATEST_TAG=$(git describe --tags --abbrev=0 --exclude v$CURRENT_VERSION 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Get the commits since the last tag
          COMMITS=$(git log $LATEST_TAG..HEAD --oneline)
          echo "::set-output name=commits::$COMMITS"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_commits.outputs.current_version }}"
          release_name: "Release ${{ steps.get_commits.outputs.current_version }}"
          body: |
            ### Changelog
            ${{ steps.get_commits.outputs.commits }}
          draft: false
          prerelease: false